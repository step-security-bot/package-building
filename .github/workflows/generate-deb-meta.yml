---
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: "Step: Generate DEB metadata"
on:
  workflow_dispatch:
  workflow_call:
    # We will pass secrets to the reusable workflow.

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-deb
  cancel-in-progress: true

# Variables available to all jobs defined in this file
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ${{ vars.REGISTRY }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  generate:
    runs-on: ubuntu-latest
    name: Mount s3fs
    strategy:
      fail-fast: false

    container:
      image: ghcr.io/northwood-labs/package-builder/ubuntu-v22.04:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: Git clone
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.base_ref }}

      - name: Mount s3fs and generate metadata
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWSSSEKMSID: "${{ secrets.AWSSSEKMSID }}"
          PACKAGE_BUCKET: ${{ vars.PACKAGE_BUCKET }}
        run: |
          echo "$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY" > ${HOME}/.passwd-s3fs
          chmod 600 ${HOME}/.passwd-s3fs

          mkdir -p /s3
          s3fs ${PACKAGE_BUCKET} /s3 \
              -o passwd_file=${HOME}/.passwd-s3fs \
              -o use_cache=/tmp \
              -o endpoint=us-east-2 \
              -o use_sse=kmsid:${AWSSSEKMSID} \
              ;

          ARCH=("amd64" "arm64")

          for CPU in ${ARCH[@]}; do
            cd "/s3/apt" && \
              mkdir -p "dists/stable/main/binary-${CPU}" && \
              dpkg-scanpackages --arch "${CPU}" pool/ > "dists/stable/main/binary-${CPU}/Packages" && \
              cat "dists/stable/main/binary-${CPU}/Packages" | gzip -9 > "dists/stable/main/binary-${CPU}/Packages.gz"
          done

          bash "${GITHUB_WORKSPACE}/generate-apt.sh" /s3/apt > /s3/apt/dists/stable/Release
